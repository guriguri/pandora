/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package pandora.avro;  


@SuppressWarnings("all")
public class PandoraRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PandoraRecord\",\"namespace\":\"pandora.avro\",\"fields\":[{\"name\":\"stringData\",\"type\":\"string\",\"default\":null},{\"name\":\"byteData\",\"type\":\"bytes\"},{\"name\":\"intData\",\"type\":\"int\"},{\"name\":\"longData\",\"type\":\"long\"},{\"name\":\"floatData\",\"type\":\"float\"},{\"name\":\"doubleData\",\"type\":\"double\"},{\"name\":\"booleanData\",\"type\":\"boolean\",\"default\":true}]}");
  @Deprecated public java.lang.CharSequence stringData;
  @Deprecated public java.nio.ByteBuffer byteData;
  @Deprecated public int intData;
  @Deprecated public long longData;
  @Deprecated public float floatData;
  @Deprecated public double doubleData;
  @Deprecated public boolean booleanData;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stringData;
    case 1: return byteData;
    case 2: return intData;
    case 3: return longData;
    case 4: return floatData;
    case 5: return doubleData;
    case 6: return booleanData;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stringData = (java.lang.CharSequence)value$; break;
    case 1: byteData = (java.nio.ByteBuffer)value$; break;
    case 2: intData = (java.lang.Integer)value$; break;
    case 3: longData = (java.lang.Long)value$; break;
    case 4: floatData = (java.lang.Float)value$; break;
    case 5: doubleData = (java.lang.Double)value$; break;
    case 6: booleanData = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'stringData' field.
   */
  public java.lang.CharSequence getStringData() {
    return stringData;
  }

  /**
   * Sets the value of the 'stringData' field.
   * @param value the value to set.
   */
  public void setStringData(java.lang.CharSequence value) {
    this.stringData = value;
  }

  /**
   * Gets the value of the 'byteData' field.
   */
  public java.nio.ByteBuffer getByteData() {
    return byteData;
  }

  /**
   * Sets the value of the 'byteData' field.
   * @param value the value to set.
   */
  public void setByteData(java.nio.ByteBuffer value) {
    this.byteData = value;
  }

  /**
   * Gets the value of the 'intData' field.
   */
  public java.lang.Integer getIntData() {
    return intData;
  }

  /**
   * Sets the value of the 'intData' field.
   * @param value the value to set.
   */
  public void setIntData(java.lang.Integer value) {
    this.intData = value;
  }

  /**
   * Gets the value of the 'longData' field.
   */
  public java.lang.Long getLongData() {
    return longData;
  }

  /**
   * Sets the value of the 'longData' field.
   * @param value the value to set.
   */
  public void setLongData(java.lang.Long value) {
    this.longData = value;
  }

  /**
   * Gets the value of the 'floatData' field.
   */
  public java.lang.Float getFloatData() {
    return floatData;
  }

  /**
   * Sets the value of the 'floatData' field.
   * @param value the value to set.
   */
  public void setFloatData(java.lang.Float value) {
    this.floatData = value;
  }

  /**
   * Gets the value of the 'doubleData' field.
   */
  public java.lang.Double getDoubleData() {
    return doubleData;
  }

  /**
   * Sets the value of the 'doubleData' field.
   * @param value the value to set.
   */
  public void setDoubleData(java.lang.Double value) {
    this.doubleData = value;
  }

  /**
   * Gets the value of the 'booleanData' field.
   */
  public java.lang.Boolean getBooleanData() {
    return booleanData;
  }

  /**
   * Sets the value of the 'booleanData' field.
   * @param value the value to set.
   */
  public void setBooleanData(java.lang.Boolean value) {
    this.booleanData = value;
  }

  /** Creates a new PandoraRecord RecordBuilder */
  public static pandora.avro.PandoraRecord.Builder newBuilder() {
    return new pandora.avro.PandoraRecord.Builder();
  }
  
  /** Creates a new PandoraRecord RecordBuilder by copying an existing Builder */
  public static pandora.avro.PandoraRecord.Builder newBuilder(pandora.avro.PandoraRecord.Builder other) {
    return new pandora.avro.PandoraRecord.Builder(other);
  }
  
  /** Creates a new PandoraRecord RecordBuilder by copying an existing PandoraRecord instance */
  public static pandora.avro.PandoraRecord.Builder newBuilder(pandora.avro.PandoraRecord other) {
    return new pandora.avro.PandoraRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for PandoraRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PandoraRecord>
    implements org.apache.avro.data.RecordBuilder<PandoraRecord> {

    private java.lang.CharSequence stringData;
    private java.nio.ByteBuffer byteData;
    private int intData;
    private long longData;
    private float floatData;
    private double doubleData;
    private boolean booleanData;

    /** Creates a new Builder */
    private Builder() {
      super(pandora.avro.PandoraRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(pandora.avro.PandoraRecord.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing PandoraRecord instance */
    private Builder(pandora.avro.PandoraRecord other) {
            super(pandora.avro.PandoraRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.stringData)) {
        this.stringData = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.stringData);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.byteData)) {
        this.byteData = (java.nio.ByteBuffer) data().deepCopy(fields()[1].schema(), other.byteData);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.intData)) {
        this.intData = (java.lang.Integer) data().deepCopy(fields()[2].schema(), other.intData);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longData)) {
        this.longData = (java.lang.Long) data().deepCopy(fields()[3].schema(), other.longData);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.floatData)) {
        this.floatData = (java.lang.Float) data().deepCopy(fields()[4].schema(), other.floatData);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.doubleData)) {
        this.doubleData = (java.lang.Double) data().deepCopy(fields()[5].schema(), other.doubleData);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.booleanData)) {
        this.booleanData = (java.lang.Boolean) data().deepCopy(fields()[6].schema(), other.booleanData);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'stringData' field */
    public java.lang.CharSequence getStringData() {
      return stringData;
    }
    
    /** Sets the value of the 'stringData' field */
    public pandora.avro.PandoraRecord.Builder setStringData(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.stringData = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'stringData' field has been set */
    public boolean hasStringData() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'stringData' field */
    public pandora.avro.PandoraRecord.Builder clearStringData() {
      stringData = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'byteData' field */
    public java.nio.ByteBuffer getByteData() {
      return byteData;
    }
    
    /** Sets the value of the 'byteData' field */
    public pandora.avro.PandoraRecord.Builder setByteData(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.byteData = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'byteData' field has been set */
    public boolean hasByteData() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'byteData' field */
    public pandora.avro.PandoraRecord.Builder clearByteData() {
      byteData = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'intData' field */
    public java.lang.Integer getIntData() {
      return intData;
    }
    
    /** Sets the value of the 'intData' field */
    public pandora.avro.PandoraRecord.Builder setIntData(int value) {
      validate(fields()[2], value);
      this.intData = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'intData' field has been set */
    public boolean hasIntData() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'intData' field */
    public pandora.avro.PandoraRecord.Builder clearIntData() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'longData' field */
    public java.lang.Long getLongData() {
      return longData;
    }
    
    /** Sets the value of the 'longData' field */
    public pandora.avro.PandoraRecord.Builder setLongData(long value) {
      validate(fields()[3], value);
      this.longData = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'longData' field has been set */
    public boolean hasLongData() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'longData' field */
    public pandora.avro.PandoraRecord.Builder clearLongData() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'floatData' field */
    public java.lang.Float getFloatData() {
      return floatData;
    }
    
    /** Sets the value of the 'floatData' field */
    public pandora.avro.PandoraRecord.Builder setFloatData(float value) {
      validate(fields()[4], value);
      this.floatData = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'floatData' field has been set */
    public boolean hasFloatData() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'floatData' field */
    public pandora.avro.PandoraRecord.Builder clearFloatData() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'doubleData' field */
    public java.lang.Double getDoubleData() {
      return doubleData;
    }
    
    /** Sets the value of the 'doubleData' field */
    public pandora.avro.PandoraRecord.Builder setDoubleData(double value) {
      validate(fields()[5], value);
      this.doubleData = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'doubleData' field has been set */
    public boolean hasDoubleData() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'doubleData' field */
    public pandora.avro.PandoraRecord.Builder clearDoubleData() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'booleanData' field */
    public java.lang.Boolean getBooleanData() {
      return booleanData;
    }
    
    /** Sets the value of the 'booleanData' field */
    public pandora.avro.PandoraRecord.Builder setBooleanData(boolean value) {
      validate(fields()[6], value);
      this.booleanData = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'booleanData' field has been set */
    public boolean hasBooleanData() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'booleanData' field */
    public pandora.avro.PandoraRecord.Builder clearBooleanData() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public PandoraRecord build() {
      try {
        PandoraRecord record = new PandoraRecord();
        record.stringData = fieldSetFlags()[0] ? this.stringData : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.byteData = fieldSetFlags()[1] ? this.byteData : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.intData = fieldSetFlags()[2] ? this.intData : (java.lang.Integer) defaultValue(fields()[2]);
        record.longData = fieldSetFlags()[3] ? this.longData : (java.lang.Long) defaultValue(fields()[3]);
        record.floatData = fieldSetFlags()[4] ? this.floatData : (java.lang.Float) defaultValue(fields()[4]);
        record.doubleData = fieldSetFlags()[5] ? this.doubleData : (java.lang.Double) defaultValue(fields()[5]);
        record.booleanData = fieldSetFlags()[6] ? this.booleanData : (java.lang.Boolean) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
